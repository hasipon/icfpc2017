// Generated by Haxe 3.4.2 (git build master @ 890f8c7)

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace eval {
	public class Evaluter : global::haxe.lang.HxObject {
		
		static Evaluter() {
			unchecked {
				global::eval.Evaluter.MAX_DISTANCE = 0;
				object __temp_stmt2 = null;
				{
					global::Array<double> _g = new global::Array<double>(new double[]{});
					{
						int _g2 = 0;
						int _g1 = ( global::eval.Evaluter.MAX_DISTANCE + 1 );
						while (( _g2 < _g1 )) {
							int i = _g2++;
							_g.push(global::System.Math.Pow(((double) (0.1) ), ((double) (i) )));
						}
						
					}
					
					__temp_stmt2 = _g;
				}
				
				object __temp_stmt1 = global::Array<object>.__hx_cast<double>(((global::Array) (__temp_stmt2) ));
				global::eval.Evaluter.MS_TABLE = ((global::Array<double>) (__temp_stmt1) );
			}
		}
		
		
		public Evaluter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Evaluter(global::Array<double> table) {
			global::eval.Evaluter.__hx_ctor_eval_Evaluter(this, table);
		}
		
		
		public static void __hx_ctor_eval_Evaluter(global::eval.Evaluter __hx_this, global::Array<double> table) {
			__hx_this.table = table;
		}
		
		
		public static int MAX_DISTANCE;
		
		public static global::Array<double> MS_TABLE;
		
		public global::Array<double> table;
		
		public virtual global::eval.EvalutionResult eval(global::game.Game game1) {
			global::Array<double> _g = new global::Array<double>(new double[]{});
			{
				int _g2 = 0;
				int _g1 = game1.punterCount;
				while (( _g2 < _g1 )) {
					int i = _g2++;
					_g.push(this.evalFor(game1, global::game._PunterId.PunterId_Impl_._new(i)));
				}
				
			}
			
			global::Array<double> values = _g;
			return new global::eval.EvalutionResult(((global::Array<double>) (values) ));
		}
		
		
		public virtual double evalFor(global::game.Game game, int punterId) {
			double @value = 0.0;
			{
				object mine = ((global::haxe.IMap<int, object>) (game.mines) ).iterator();
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(mine, "hasNext", 407283053, null))) {
					global::game.Site mine1 = ((global::game.Site) (global::haxe.lang.Runtime.callField(mine, "next", 1224901875, null)) );
					global::Array<object> currentSites = new global::Array<object>(new object[]{});
					global::haxe.IMap<int, int> distances = new global::haxe.ds.IntMap<int>();
					this.searchRivers(game, mine1, punterId, 0, distances, currentSites);
					{
						int _g1 = 0;
						int _g = global::eval.Evaluter.MAX_DISTANCE;
						while (( _g1 < _g )) {
							int i = _g1++;
							global::Array<object> nextSites = new global::Array<object>(new object[]{});
							{
								int _g2 = 0;
								while (( _g2 < currentSites.length )) {
									global::game.Site site = ((global::game.Site) (currentSites[_g2]) );
									 ++ _g2;
									this.searchRivers(game, site, punterId, i, distances, nextSites);
								}
								
							}
							
							currentSites = nextSites;
						}
						
					}
					
					{
						object siteId = distances.keys();
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(siteId, "hasNext", 407283053, null))) {
							int siteId1 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(siteId, "next", 1224901875, null))) );
							global::haxe.lang.Null<int> distance = ((global::haxe.lang.Null<int>) (distances.@get(siteId1)) );
							@value += ( this.table[(distance).@value] * (((global::haxe.IMap<int, int>) (global::haxe.IMap__Statics_.__hx_cast<int, int>(((global::haxe.IMap) ((((global::haxe.IMap<int, object>) (game.scoreDictionary) ).@get(mine1.id)).@value) ))) ).@get(siteId1)).@value );
						}
						
					}
					
				}
				
			}
			
			return @value;
		}
		
		
		public virtual void searchRivers(global::game.Game game, global::game.Site site, int punterId, int i, global::haxe.IMap<int, int> distances, global::Array<object> nextSites) {
			unchecked {
				object river = ((global::haxe.IMap<int, object>) (site.rivers) ).iterator();
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(river, "hasNext", 407283053, null))) {
					global::game.River river1 = ((global::game.River) (global::haxe.lang.Runtime.callField(river, "next", 1224901875, null)) );
					while (true) {
						int another = ( (( river1.a == site.id )) ? (river1.b) : (river1.a) );
						if ( ! (distances.exists(another)) ) {
							if (( river1.owner == punterId )) {
								distances.@set(another, i);
								site = ((global::game.Site) ((((global::haxe.IMap<int, object>) (game.sites) ).@get(another)).@value) );
								continue;
							}
							else {
								{
									int v = ( i + 1 );
									distances.@set(another, v);
								}
								
								nextSites.push(((global::game.Site) ((((global::haxe.IMap<int, object>) (game.sites) ).@get(another)).@value) ));
							}
							
						}
						
						break;
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 182695950:
					{
						this.table = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1012126063:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "searchRivers", 1012126063)) );
					}
					
					
					case 931871949:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "evalFor", 931871949)) );
					}
					
					
					case 1125936028:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "eval", 1125936028)) );
					}
					
					
					case 182695950:
					{
						return this.table;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1012126063:
					{
						this.searchRivers(((global::game.Game) (dynargs[0]) ), ((global::game.Site) (dynargs[1]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), ((global::haxe.IMap<int, int>) (global::haxe.IMap__Statics_.__hx_cast<int, int>(((global::haxe.IMap) (dynargs[4]) ))) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[5]) ))) ));
						break;
					}
					
					
					case 931871949:
					{
						return this.evalFor(((global::game.Game) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					case 1125936028:
					{
						return this.eval(((global::game.Game) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("table");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


