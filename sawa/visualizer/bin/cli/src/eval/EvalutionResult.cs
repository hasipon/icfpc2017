// Generated by Haxe 3.4.2 (git build master @ 890f8c7)

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace eval {
	public class EvalutionResult : global::haxe.lang.HxObject {
		
		public EvalutionResult(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public EvalutionResult(global::Array<double> values) {
			global::eval.EvalutionResult.__hx_ctor_eval_EvalutionResult(this, values);
		}
		
		
		public static void __hx_ctor_eval_EvalutionResult(global::eval.EvalutionResult __hx_this, global::Array<double> values) {
			__hx_this.values = values;
		}
		
		
		public global::Array<double> values;
		
		public virtual double getFor(int id) {
			unchecked {
				double result = 0.0;
				{
					int _g1 = 0;
					int _g = this.values.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						int current = global::game._PunterId.PunterId_Impl_._new(i);
						double @value = this.values[i];
						if (( current == id )) {
							result += @value;
						}
						else {
							result -= ( @value / (( this.values.length - 1 )) );
						}
						
					}
					
				}
				
				return result;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1337394146:
					{
						this.values = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 589103123:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getFor", 589103123)) );
					}
					
					
					case 1337394146:
					{
						return this.values;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 589103123:
					{
						return this.getFor(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("values");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


