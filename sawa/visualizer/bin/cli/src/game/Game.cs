// Generated by Haxe 3.4.2 (git build master @ 890f8c7)

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace game {
	public class Game : global::haxe.lang.HxObject {
		
		public Game(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Game() {
			global::game.Game.__hx_ctor_game_Game(this);
		}
		
		
		public static void __hx_ctor_game_Game(global::game.Game __hx_this) {
			__hx_this.sites = new global::haxe.ds.IntMap<object>();
			__hx_this.mines = new global::haxe.ds.IntMap<object>();
			__hx_this.rivers = new global::haxe.ds.IntMap<object>();
			__hx_this.punters = new global::haxe.ds.IntMap<object>();
			__hx_this.scoreDictionary = new global::haxe.ds.IntMap<object>();
			__hx_this.mineCount = 0;
			__hx_this.siteCount = 0;
			__hx_this.riverCount = 0;
			__hx_this.maxScore = 0;
			__hx_this.punterCount = 0;
			__hx_this.moves = new global::Array<object>(new object[]{});
		}
		
		
		public global::haxe.IMap<int, object> sites;
		
		public global::haxe.IMap<int, object> mines;
		
		public global::haxe.ds.IntMap<object> rivers;
		
		public global::haxe.ds.IntMap<object> punters;
		
		public global::haxe.IMap<int, object> scoreDictionary;
		
		public int mineCount;
		
		public int siteCount;
		
		public int riverCount;
		
		public int punterCount;
		
		public int maxScore;
		
		public global::Array<object> moves;
		
		public virtual void setup(object setupStruct) {
			this.setupMap(global::haxe.lang.Runtime.getField(setupStruct, "map", 5442204, true));
			this.setupPunters(((int) (global::haxe.lang.Runtime.getField_f(setupStruct, "punters", 473088699, true)) ));
		}
		
		
		public virtual void setupPunters(int punterIds) {
			{
				int _g1 = 0;
				int _g = punterIds;
				while (( _g1 < _g )) {
					int i = _g1++;
					int id = global::game._PunterId.PunterId_Impl_._new(i);
					{
						global::haxe.IMap<int, object> this1 = this.punters;
						global::game.Punter v = new global::game.Punter(this, id);
						((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (this1) ))) ).@set(id, v);
					}
					
				}
				
			}
			
			this.punterCount = punterIds;
		}
		
		
		public virtual void setupMap(object map) {
			unchecked {
				{
					int _g = 0;
					global::Array<object> _g1 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(map, "sites", 2094299916, true)) ))) );
					while (( _g < _g1.length )) {
						object data = _g1[_g];
						 ++ _g;
						global::game.Site site = new global::game.Site(this, ((int) (global::haxe.lang.Runtime.getField_f(data, "id", 23515, true)) ), ( ( ! (global::haxe.lang.Null<object>.ofDynamic<double>(global::haxe.lang.Runtime.getField(data, "x", 120, true)).hasValue) ) ? (global::Math.rand.NextDouble()) : (((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(data, "x", 120, true))) )) ), ( ( ! (global::haxe.lang.Null<object>.ofDynamic<double>(global::haxe.lang.Runtime.getField(data, "y", 121, true)).hasValue) ) ? (global::Math.rand.NextDouble()) : (((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(data, "y", 121, true))) )) ));
						((global::haxe.IMap<int, object>) (this.sites) ).@set(site.id, site);
					}
					
				}
				
				{
					int _g2 = 0;
					global::Array<int> _g11 = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(map, "mines", 141062784, true)) ))) );
					while (( _g2 < _g11.length )) {
						int siteId = _g11[_g2];
						 ++ _g2;
						global::game.Site site1 = ((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(siteId)).@value) );
						site1.isMine = true;
						((global::haxe.IMap<int, object>) (this.mines) ).@set(siteId, site1);
					}
					
				}
				
				int i = 0;
				{
					int _g3 = 0;
					global::Array<object> _g12 = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(map, "rivers", 1477328871, true)) ))) );
					while (( _g3 < _g12.length )) {
						object data1 = _g12[_g3];
						 ++ _g3;
						int id = global::game._RiverId.RiverId_Impl_._new(i);
						global::game.River river = new global::game.River(this, id, ((int) (global::haxe.lang.Runtime.getField_f(data1, "source", 842117339, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(data1, "target", 116192081, true)) ));
						((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this.rivers) )) ))) ).@set(id, river);
						((global::haxe.IMap<int, object>) (((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(river.a)).@value) ).rivers) ).@set(( (( river.a == river.a )) ? (river.b) : (river.a) ), river);
						((global::haxe.IMap<int, object>) (((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(river.b)).@value) ).rivers) ).@set(( (( river.a == river.b )) ? (river.b) : (river.a) ), river);
						 ++ i;
					}
					
				}
				
				this.mineCount = ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (global::haxe.lang.Runtime.getField(map, "mines", 141062784, true)) ))) ).length;
				this.siteCount = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(map, "sites", 2094299916, true)) ))) ).length;
				this.riverCount = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (global::haxe.lang.Runtime.getField(map, "rivers", 1477328871, true)) ))) ).length;
				this.maxScore = 0;
				{
					object mine = ((global::haxe.IMap<int, object>) (this.mines) ).iterator();
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(mine, "hasNext", 407283053, null))) {
						global::game.Site mine1 = ((global::game.Site) (global::haxe.lang.Runtime.callField(mine, "next", 1224901875, null)) );
						global::haxe.IMap<int, int> localScores = new global::haxe.ds.IntMap<int>();
						((global::haxe.IMap<int, object>) (this.scoreDictionary) ).@set(mine1.id, localScores);
						global::Array<object> currentSites = new global::Array<object>(new object[]{mine1});
						global::haxe.IMap<int, int> distances = new global::haxe.ds.IntMap<int>();
						distances.@set(mine1.id, 0);
						{
							int _g13 = 0;
							int _g4 = this.siteCount;
							while (( _g13 < _g4 )) {
								int i1 = _g13++;
								global::Array<object> nextSites = new global::Array<object>(new object[]{});
								{
									int _g21 = 0;
									while (( _g21 < currentSites.length )) {
										global::game.Site site2 = ((global::game.Site) (currentSites[_g21]) );
										 ++ _g21;
										{
											object river1 = ((global::haxe.IMap<int, object>) (site2.rivers) ).iterator();
											while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(river1, "hasNext", 407283053, null))) {
												global::game.River river2 = ((global::game.River) (global::haxe.lang.Runtime.callField(river1, "next", 1224901875, null)) );
												int another = ( (( river2.a == site2.id )) ? (river2.b) : (river2.a) );
												if ( ! (distances.exists(another)) ) {
													{
														int v = ( i1 + 1 );
														distances.@set(another, v);
													}
													
													nextSites.push(((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(another)).@value) ));
												}
												
											}
											
										}
										
									}
									
								}
								
								currentSites = nextSites;
							}
							
						}
						
						{
							object siteId1 = distances.keys();
							while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(siteId1, "hasNext", 407283053, null))) {
								int siteId2 = ((int) (global::haxe.lang.Runtime.toInt(global::haxe.lang.Runtime.callField(siteId1, "next", 1224901875, null))) );
								global::haxe.lang.Null<int> distance = ((global::haxe.lang.Null<int>) (distances.@get(siteId2)) );
								int score = ( (distance).@value * (distance).@value );
								localScores.@set(siteId2, score);
								this.maxScore += score;
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void addMove(object move) {
			if (( global::haxe.lang.Runtime.getField(move, "pass", 1246880977, true) != null )) {
				this.pass(((int) (global::haxe.lang.Runtime.getField_f(global::haxe.lang.Runtime.getField(move, "pass", 1246880977, true), "punter", 1860705976, true)) ));
			}
			else {
				this.claim(global::haxe.lang.Runtime.getField(move, "claim", 1213755260, true));
			}
			
			this.moves.push(move);
		}
		
		
		public virtual void undoMove() {
			object move = (this.moves.pop()).toDynamic();
			if (( global::haxe.lang.Runtime.getField(move, "pass", 1246880977, true) != null )) {
			}
			else {
				this.undoClaim(global::haxe.lang.Runtime.getField(move, "claim", 1213755260, true));
			}
			
		}
		
		
		public virtual void undoClaim(object move) {
			global::game.River river = ((global::game.River) ((((global::haxe.IMap<int, object>) (((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(((int) (global::haxe.lang.Runtime.getField_f(move, "source", 842117339, true)) ))).@value) ).rivers) ).@get(((int) (global::haxe.lang.Runtime.getField_f(move, "target", 116192081, true)) ))).@value) );
			river.owner = global::game._PunterId.PunterId_Impl_.NotFound;
		}
		
		
		public virtual void addMoves(global::Array<object> moves) {
			int _g = 0;
			while (( _g < moves.length )) {
				object move = moves[_g];
				 ++ _g;
				this.addMove(move);
			}
			
		}
		
		
		public virtual void claim(object move) {
			global::game.River river = ((global::game.River) ((((global::haxe.IMap<int, object>) (((global::game.Site) ((((global::haxe.IMap<int, object>) (this.sites) ).@get(((int) (global::haxe.lang.Runtime.getField_f(move, "source", 842117339, true)) ))).@value) ).rivers) ).@get(((int) (global::haxe.lang.Runtime.getField_f(move, "target", 116192081, true)) ))).@value) );
			river.owner = ((int) (global::haxe.lang.Runtime.getField_f(move, "punter", 1860705976, true)) );
		}
		
		
		public virtual void pass(int punter) {
		}
		
		
		public virtual global::Array<object> getLivingRivers() {
			global::Array<object> _g = new global::Array<object>(new object[]{});
			{
				object river = ((object) (new global::haxe.ds._IntMap.IntMapValueIterator<object>(((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (((global::haxe.IMap<int, object>) (this.rivers) )) ))) ))) );
				while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(river, "hasNext", 407283053, null))) {
					global::game.River river1 = ((global::game.River) (global::haxe.lang.Runtime.callField(river, "next", 1224901875, null)) );
					if (( river1.owner == global::game._PunterId.PunterId_Impl_.NotFound )) {
						_g.push(river1);
					}
					
				}
				
			}
			
			return _g;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 586597902:
					{
						this.maxScore = ((int) (@value) );
						return @value;
					}
					
					
					case 740702967:
					{
						this.punterCount = ((int) (@value) );
						return @value;
					}
					
					
					case 1571143203:
					{
						this.riverCount = ((int) (@value) );
						return @value;
					}
					
					
					case 1333325768:
					{
						this.siteCount = ((int) (@value) );
						return @value;
					}
					
					
					case 1682944316:
					{
						this.mineCount = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 207998018:
					{
						this.moves = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 586597902:
					{
						this.maxScore = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 740702967:
					{
						this.punterCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1571143203:
					{
						this.riverCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1333325768:
					{
						this.siteCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1682944316:
					{
						this.mineCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1350575496:
					{
						this.scoreDictionary = ((global::haxe.IMap<int, object>) (global::haxe.IMap__Statics_.__hx_cast<int, object>(((global::haxe.IMap) (@value) ))) );
						return @value;
					}
					
					
					case 473088699:
					{
						this.punters = ((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (@value) ))) );
						return @value;
					}
					
					
					case 1477328871:
					{
						this.rivers = ((global::haxe.ds.IntMap<object>) (global::haxe.ds.IntMap<object>.__hx_cast<object>(((global::haxe.ds.IntMap) (@value) ))) );
						return @value;
					}
					
					
					case 141062784:
					{
						this.mines = ((global::haxe.IMap<int, object>) (global::haxe.IMap__Statics_.__hx_cast<int, object>(((global::haxe.IMap) (@value) ))) );
						return @value;
					}
					
					
					case 2094299916:
					{
						this.sites = ((global::haxe.IMap<int, object>) (global::haxe.IMap__Statics_.__hx_cast<int, object>(((global::haxe.IMap) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1034971558:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getLivingRivers", 1034971558)) );
					}
					
					
					case 1246880977:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pass", 1246880977)) );
					}
					
					
					case 1213755260:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "claim", 1213755260)) );
					}
					
					
					case 96662113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addMoves", 96662113)) );
					}
					
					
					case 2005358264:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "undoClaim", 2005358264)) );
					}
					
					
					case 447461205:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "undoMove", 447461205)) );
					}
					
					
					case 77473234:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addMove", 77473234)) );
					}
					
					
					case 590053407:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setupMap", 590053407)) );
					}
					
					
					case 1516746174:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setupPunters", 1516746174)) );
					}
					
					
					case 2049945213:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setup", 2049945213)) );
					}
					
					
					case 207998018:
					{
						return this.moves;
					}
					
					
					case 586597902:
					{
						return this.maxScore;
					}
					
					
					case 740702967:
					{
						return this.punterCount;
					}
					
					
					case 1571143203:
					{
						return this.riverCount;
					}
					
					
					case 1333325768:
					{
						return this.siteCount;
					}
					
					
					case 1682944316:
					{
						return this.mineCount;
					}
					
					
					case 1350575496:
					{
						return this.scoreDictionary;
					}
					
					
					case 473088699:
					{
						return this.punters;
					}
					
					
					case 1477328871:
					{
						return this.rivers;
					}
					
					
					case 141062784:
					{
						return this.mines;
					}
					
					
					case 2094299916:
					{
						return this.sites;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 586597902:
					{
						return ((double) (this.maxScore) );
					}
					
					
					case 740702967:
					{
						return ((double) (this.punterCount) );
					}
					
					
					case 1571143203:
					{
						return ((double) (this.riverCount) );
					}
					
					
					case 1333325768:
					{
						return ((double) (this.siteCount) );
					}
					
					
					case 1682944316:
					{
						return ((double) (this.mineCount) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1034971558:
					{
						return this.getLivingRivers();
					}
					
					
					case 1246880977:
					{
						this.pass(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1213755260:
					{
						this.claim(dynargs[0]);
						break;
					}
					
					
					case 96662113:
					{
						this.addMoves(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[0]) ))) ));
						break;
					}
					
					
					case 2005358264:
					{
						this.undoClaim(dynargs[0]);
						break;
					}
					
					
					case 447461205:
					{
						this.undoMove();
						break;
					}
					
					
					case 77473234:
					{
						this.addMove(dynargs[0]);
						break;
					}
					
					
					case 590053407:
					{
						this.setupMap(dynargs[0]);
						break;
					}
					
					
					case 1516746174:
					{
						this.setupPunters(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 2049945213:
					{
						this.setup(dynargs[0]);
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("moves");
			baseArr.push("maxScore");
			baseArr.push("punterCount");
			baseArr.push("riverCount");
			baseArr.push("siteCount");
			baseArr.push("mineCount");
			baseArr.push("scoreDictionary");
			baseArr.push("punters");
			baseArr.push("rivers");
			baseArr.push("mines");
			baseArr.push("sites");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


